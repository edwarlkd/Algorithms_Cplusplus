// Merge+Insertion sort
// if n > 10, merge is used. 

#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <string>
#include <vector>
#include <math.h>

//floor and ceiling()

using namespace std;

void insertionsort(int *A,int index, int size1)
{
    int key, i;
    for(int j = index+1; j<size1+index; j++) //changed from 1 to index
    {
        key = A[j];

        //if A[1] is bigger than A[2], SWAP!
        i = j -1;
        while(i>=index && A[i] > key)
        {
            A[i+1] = A[i]; //A[2] has been replaced for A[1]
            i = i - 1;
            A[i+1] = key;
        }
    }

 //   cerr << "After Insertion sorted: ";
   // for(int i = index; i < size1+index; i++)
   //     cerr << A[i] << "  ";

   // cerr << endl << endl;

}

//(p,q) and (q+1,r) r==endofindex or size
void mergef(int *arrayA, int p, int q, int r)
{
    //ERRORLOG:
    //When r = odd, Rset is off. First value is not read properly.
    //"int sizeR = sizeof(Rset)/sizeof(Rset[0]);" yield wrong result.

    //find the half
    //use it to separate left and right. (assume 4:4 array are in sorted).
    // p = 0 first value, q = middle by floor(), r = number of array).
    // q = floor(arraySize/2);

    int n1 = q-p; // # of values
    int n2 = r-q; // if r = 13, then n1 = 6, n2 - 7; i think FIXED
    int *Lset;
    int *Rset;
    int Lsetsize = n1+1; // +1 is for the last Null value.
    int Rsetsize = n2+1; // +1 is for the last NULL value

    //output testing
   // cerr << "\nStart of Mergef\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n";
   // cerr << "Following has r-p = " << r-p << " elements.\n";
   // cerr << "r = " << r << "     p = " << p << "    q(mid) = " << q << endl;
   // cerr << "#s in subarrays n1 = " << n1 << "      n2 = " << n2 << endl;
    //cerr << "Input array: ";
    for(int i = p; i < r; i++)
    {
     //   cerr << arrayA[i] << "  ";
    }
    //cerr << endl;

    Lset = new int[Lsetsize];
    Rset = new int[Rsetsize];
    //replace it with an array
    //vector<int> setA;
    //vector<int> setB;

    //now add to array. INITIALIZTION
   // cerr << "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL" << endl;
    for(int i = 0; i < n1; i++) //omit the last one
    {
        Lset[i] = arrayA[p+i];
    }
    Lset[n1] = 0; //last value initialized.
    for(int i = 0; i < n2; i++) //second half of the array to setB
    {
        Rset[i] = arrayA[q+i]; //changed from n2.
    }
    Rset[n2] = 0;

//    for(int i = 0; i < Lsetsize; i++) //omit the last one
  //  {
    //    cerr << "Lset[" << i << "] = " << Lset[i] << "   Rset[" << i << "] = " << Rset[i] << endl;
   // }

    //cerr << "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRR" << endl;

    //array translation.
    int *Resultset;
    int Resultsetsize = r; // +1 is for the last Null value.
    int indexresult = 0; //index for transferring to Resultset
    int indexL = 0;
    int indexR = 0;
    Resultset = new int[Resultsetsize];

    //error is either here or to next assigning back to arrayA.

    for(int i = 0; i < r; i++) //so every numbers are checked. but exit if null is found.
    {
        //checking emptiness
        //if one is empty, we just stick the other sorted subarray.
        if(Lset[indexL] == 0) //check if the index is last empty element
        {
            // put the remaining Rset[] in there;last '0' omitted.
            //how can you tell how many are left? = use howmanyLR to keep track.
            int howmanyR = n2-indexR;
            for(int j = indexR; j < n2;j++)
            {//for(int j = 0; j < setB.size()-1;j++)
            //    setResult.push_back(setB[j]); //since A is empty and B is in order, just stack setB
                Resultset[indexresult] = Rset[j];
                indexresult++;
            }
            break;
        }
        if(Rset[indexR] == 0)
        {
            //for(int j = 0; j < Rset.size()-1;j++)
            for(int j = indexL; j < n1; j++)
            {
              //  setResult.push_back(setA[j]); //since A is empty and B is in order, just stack setB
                Resultset[indexresult] = Lset[j];
                indexresult++;
            }
            break;
        }

        //i gotta fix this to add another index to keep track.
        if(Lset[indexL] < Rset[indexR] || Lset[indexL] == Rset[indexR]) //delete from front.
        {
            Resultset[indexresult] = Lset[indexL];
            indexresult++;
            indexL++;;
        }
        else if(Lset[indexL] > Rset[indexR]) //if setB value is smaller, push that in
        {
            Resultset[indexresult] = Rset[indexR];
            indexresult++;
            indexR++;
        }
    }

//   cerr << "\nAfter Mergesortion (Resultsets): ";
 //   for(int i = 0;i < indexresult; i++)
  //      cerr << Resultset[i] << "   ";

    //now, copy the sorted ones to the array for our input-parameter
    for(int i = 0; i < indexresult; i++)
    {
        //'i' gotta change.
        arrayA[p+i] = Resultset[i];
    }
 //  cerr << "\nAfter Mergesortion (arrayA): ";
  //  for(int i = p;i < p+indexresult; i++)
   //     cerr << arrayA[i] << "   ";

    //delocate.
    //setA.clear();
    //setB.clear();
    //setResult.clear();
    delete[] Resultset;
    delete[] Rset;
    delete[] Lset;

  //  cout << "\nAfter Mergesortion: ";
//    for(int i = 0;i < r; i++)
  //      cout << arrayA[i] << "   ";

  //  cerr << "\nEnd of Mergesort............................" << endl;
  //  cerr << "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n\n";
}

void MyFunc (int *arrayA, int p, int r){
    if (r-p >= 10)
    {
        //find mid point
        int q = floor((p+r)/2);

        //MyFunc(arrayA, p, q);
        //MyFunc(arrayA, q+1,r);
        MyFunc(arrayA, p, q); // !!match it to index, index
        MyFunc(arrayA, q, r); //3rd parameter is size, and index of "first element"

        mergef(arrayA, p, q, r);
    }
    else //use insertion
    {
        insertionsort(arrayA, p, r-p); // second parameter is #s of values
    }


}

int main(int argc,char **argv) {


    //To Do.
    //1. Read the files
    //2. Acquire the input data
    //3. Sort them using the function.
    //4. Output; which will be compared with data in 'testfiles'

  int *Sequence;
  int arraySize;

  // Get the size of the sequence
  cin >> arraySize;

  // Allocate enough memory to store "arraySize" integers
  Sequence = new int[arraySize];

  // Read in the sequence
  for ( int i=0; i<arraySize; i++ )
    cin >> Sequence[i];

    //sorted
    int q1 = floor(arraySize/2);
    MyFunc(Sequence, 0, arraySize);

/*
    int arr[23] = {1,3,5,7,9,11,13,12,6,52,3,6,11,21,27,14,18,4,82,62,35,64,33};
    cout << "before func: ";
    for(int i=0; i<23; i++)
      cout << arr[i] << "  ";

    MyFunc(arr, 0, 23);
    for(int i=0; i<23; i++)
      cout << arr[i] << "  ";
*/


    // Output the result
    for(int i=0; i<arraySize; i++)
      cout << Sequence[i] << endl;

    delete[] Sequence;

}
