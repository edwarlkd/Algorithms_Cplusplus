#include <iostream>
#include <vector>
#include <fstream>
#include "math.h"
#include <time.h>
#include <stdlib.h>
using namespace std;

int partitionfuncarray(int *A, int p, int r) //p is the index of the first element
{
        //find a random variable
        srand(time(NULL)); // Seed the time
        int ii = r;
        if(r-p != 0) // if size of subarray is not 0, then use the random number.
            ii = rand()%(r-p)+p; // Generate the number, assign to variable.

        //exchange i with last value.
        int temp1 = A[ii];
        A[ii] = A[r];
        A[r] = temp1;

        int lastindex = r; //index of last element
        int x = A[lastindex]; //last value

        int i;
        if(p == 0)
            i = -1;
        else
            i = p-1;

        for(int j = p; j <=lastindex-1; j++) //intiially, second value
        {
            if(A[j] <= x)
            {
                i++;
                //exchange
                int temp = A[i];
                A[i] = A[j];
                A[j] = temp;
            }
        }

        //exchange
        int temp = A[i+1];
        A[i+1] = A[lastindex];
        A[lastindex] = temp;

        return (i + 1);

}

void quicksortarray(int *A, int p, int r) // p == 0, r == lastindex
{
    if(p <= r)
    {
        int q = partitionfuncarray(A, p, r); //q is vec[r] after the 'initial ordering'
        //quicksort is made to separate into two subarrays that are all smaller on one array and bigger on other array.

        //error: after a loop, quicksort(..., ..., last index) whereas next quicksort(..., ..., index+1)
        if(p != q - 1) //if initial point p == q - 1; then it's a single element.
        {
            quicksortarray(A, p, q - 1);
        }

        quicksortarray(A, q+1,r);
    }

}


int main()
{
    //ARRRRRRRRRRRRRRRRRRRRRRRRRAY
    //QUICKSORT         QUICKSORT
    int *arr;
    int arraySize;
    cin >> arraySize;
    arr = new int[arraySize];

    for ( int i=0; i<arraySize; i++ )
        cin >> arr[i];
    quicksortarray(arr, 0, arraySize-1);

    for(int i = 0; i < arraySize; i++)
        cout << arr[i] << endl;

    delete[] arr;

    return 0;
}
